# ===============================
# THYMELEAF
# ===============================
spring.thymeleaf.cache=false
# ===============================
# DATASOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database MySQL
#spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/myemployee?useSSL=false&useUnicode=yes&characterEncoding=UTF-8
#spring.datasource.username = root
#spring.datasource.password = hoanggiang.d19bk
#server.port = 8090

# Connection url for the database PostgreSQL
spring.datasource.driver-class-name = org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://ec2-79-125-124-30.eu-west-1.compute.amazonaws.com:5432/dd92opclfbnc8m?useSSL=false&useUnicode=yes&characterEncoding=UTF-8
spring.datasource.username = msmyqkdmrvwfko
spring.datasource.password = ed8bd38c71803d8d800aba3f33189df8f109a1ae93bc8d195c4a1605aee57be5
#server.port = 8090

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.dbcp.test-while-idle=true
spring.datasource.dbcp.validation-query=SELECT 1

# ===============================
# JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect